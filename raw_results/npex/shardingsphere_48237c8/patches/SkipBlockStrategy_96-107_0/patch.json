{
    "contents": "if (currentAuthResult != null) {\n    char messageType = ((char) (((org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload) (payload)).readInt1()));\n    if ('p' != messageType) {\n        org.apache.shardingsphere.db.protocol.postgresql.packet.generic.PostgreSQLErrorResponsePacket responsePacket = createErrorPacket(org.apache.shardingsphere.db.protocol.postgresql.constant.PostgreSQLErrorCode.SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION, java.lang.String.format(\"PasswordMessage is expected, message type 'p', but not '%s'\", messageType));\n        context.writeAndFlush(responsePacket);\n        context.close();\n        currentAuthResult = org.apache.shardingsphere.proxy.frontend.engine.AuthenticationResult.continued();\n        return currentAuthResult;\n    }\n    org.apache.shardingsphere.db.protocol.postgresql.packet.handshake.PostgreSQLPasswordMessagePacket passwordMessagePacket = new org.apache.shardingsphere.db.protocol.postgresql.packet.handshake.PostgreSQLPasswordMessagePacket(((org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload) (payload)));\n    org.apache.shardingsphere.proxy.frontend.postgresql.auth.PostgreSQLLoginResult loginResult = org.apache.shardingsphere.proxy.frontend.postgresql.auth.PostgreSQLAuthenticationHandler.loginWithMd5Password(currentAuthResult.getUsername(), currentAuthResult.getDatabase(), md5Salt, passwordMessagePacket);\n    if (org.apache.shardingsphere.db.protocol.postgresql.constant.PostgreSQLErrorCode.SUCCESSFUL_COMPLETION != loginResult.getErrorCode()) {\n        org.apache.shardingsphere.db.protocol.postgresql.packet.generic.PostgreSQLErrorResponsePacket responsePacket = createErrorPacket(loginResult.getErrorCode(), loginResult.getErrorMessage());\n        context.writeAndFlush(responsePacket);\n        context.close();\n        return org.apache.shardingsphere.proxy.frontend.engine.AuthenticationResult.continued();\n    } else {\n        // TODO implement PostgreSQLServerInfo like MySQLServerInfo\n        context.write(new org.apache.shardingsphere.db.protocol.postgresql.packet.handshake.PostgreSQLAuthenticationOKPacket(true));\n        context.write(new org.apache.shardingsphere.db.protocol.postgresql.packet.handshake.PostgreSQLParameterStatusPacket(\"server_version\", \"12.3\"));\n        context.write(new org.apache.shardingsphere.db.protocol.postgresql.packet.handshake.PostgreSQLParameterStatusPacket(\"client_encoding\", \"UTF8\"));\n        context.write(new org.apache.shardingsphere.db.protocol.postgresql.packet.handshake.PostgreSQLParameterStatusPacket(\"server_encoding\", \"UTF8\"));\n        context.writeAndFlush(new org.apache.shardingsphere.db.protocol.postgresql.packet.generic.PostgreSQLReadyForQueryPacket());\n        return org.apache.shardingsphere.proxy.frontend.engine.AuthenticationResult.finished(currentAuthResult.getUsername(), currentAuthResult.getDatabase());\n    }\n}",
    "original_filepath": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java",
    "patched_lines": [96]
}